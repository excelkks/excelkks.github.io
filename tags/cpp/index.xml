<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on excelkks</title>
    <link>/tags/cpp/</link>
    <description>Recent content in cpp on excelkks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 13:48:37 +0800</lastBuildDate><atom:link href="/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>直接初始化和拷贝初始化</title>
      <link>/post/2021/03/02/%E7%9B%B4%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%8B%B7%E8%B4%9D%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Tue, 02 Mar 2021 13:48:37 +0800</pubDate>
      
      <guid>/post/2021/03/02/%E7%9B%B4%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%8B%B7%E8%B4%9D%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>拷贝初始化底层是先调用构造函数创建一个临时变量，再将临时变量通过拷贝构造函数创建新变量。考虑如下过程
class A{ public: A() { cout &amp;lt;&amp;lt; &amp;#34;default constructor&amp;#34; &amp;lt;&amp;lt; endl; } A(const string&amp;amp; _str):str(_str) { cout &amp;lt;&amp;lt; &amp;#34;constructor&amp;#34; &amp;lt;&amp;lt; endl; } explicit A(const A&amp;amp; a) { cout &amp;lt;&amp;lt; &amp;#34;copy constructor&amp;#34; &amp;lt;&amp;lt; endl; } string str; } int main() { A a1; // direct initialiazation A a2(string(&amp;#34;hi&amp;#34;)); // direct initialiazation A a3 = string(&amp;#34;hi&amp;#34;); // error, string(&amp;#34;hi&amp;#34;) can&amp;#39;t // implicit convert to A // (copy initialiazation) A a4 = a2; // the same as above // a2 can&amp;#39;t implicit convert to A // by call copy constructor } 拷贝初始化发生情况 用= 定义变量时 string s1(&amp;#34;hi&amp;#34;); // direct initialiazation string s2 = s1; // copy initialiazation 将一个对象作为实参传递给一个非引用类型的形参 void Foo(string s) { } Foo(s1); // copy initialiazation 从一个返回类型为非引用类型的函数返回一个对象 string Foo2(){ string s(&amp;#34;hi&amp;#34;); return s; } Foo2(); // copy initialiazation 用花括号列表初始化一个数组中的元素或一个聚合类中的成员 // copy initialiazation string strs[] = {&amp;#34;This&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;copy&amp;#34;, &amp;#34;initialiazation&amp;#34;}; struct Data { int x; int y; }; // copy initialiazation Data dt = {0, 0}; 三五法则 拷贝构造函数 拷贝赋值运算符 析构函数 移动构造函数 移动赋值运算符 需要析构函数的类也需要拷贝和赋值操作</description>
    </item>
    
  </channel>
</rss>
