<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on excelkks</title>
    <link>/tags/cpp/</link>
    <description>Recent content in cpp on excelkks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 13:48:37 +0800</lastBuildDate>
    
	<atom:link href="/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>直接初始化和拷贝初始化</title>
      <link>/post/2021/03/02/%E7%9B%B4%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%8B%B7%E8%B4%9D%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Tue, 02 Mar 2021 13:48:37 +0800</pubDate>
      
      <guid>/post/2021/03/02/%E7%9B%B4%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%8B%B7%E8%B4%9D%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>拷贝初始化底层是先调用构造函数创建一个临时变量，再将临时变量通过拷贝构造函数创建新变量。考虑如下过程
class A{ public: A() { cout &amp;lt;&amp;lt; &amp;#34;default constructor&amp;#34; &amp;lt;&amp;lt; endl; } A(const string&amp;amp; _str):str(_str) { cout &amp;lt;&amp;lt; &amp;#34;constructor&amp;#34; &amp;lt;&amp;lt; endl; } explicit A(const A&amp;amp; a) { cout &amp;lt;&amp;lt; &amp;#34;copy constructor&amp;#34; &amp;lt;&amp;lt; endl; } string str; } int main() { A a1; // direct initialiazation  A a2(string(&amp;#34;hi&amp;#34;)); // direct initialiazation  A a3 = string(&amp;#34;hi&amp;#34;); // error, string(&amp;#34;hi&amp;#34;) can&amp;#39;t  // implicit convert to A  // (copy initialiazation)  A a4 = a2; // the same to above  // a2 can&amp;#39;t implicit convert to A  // by call copy constructor } </description>
    </item>
    
  </channel>
</rss>